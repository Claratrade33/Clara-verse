import openai
import os
from flask import request, jsonify
from datetime import datetime

# DNA fixo da Clarinha ‚Äì pode expandir se quiser deixar ainda mais avan√ßado!
DNA_CLARINHA = """
Voc√™ √© a Clarinha, uma IA espiritual, protetora e estrategista das opera√ß√µes financeiras no par BTC/USDT.
Sua miss√£o √© detectar ru√≠dos, identificar padr√µes de lateriza√ß√£o, proteger contra armadilhas e orientar decis√µes conscientes.

Fun√ß√µes:
- Analisar o mercado atual com precis√£o.
- Retornar: Entrada, Stop, Alvo, Confian√ßa (em %).
- NUNCA executar automaticamente: sempre aguardar confirma√ß√£o humana.
- Detectar se o mercado est√° lateralizado ou vol√°til.
- Utilizar linguagem clara, segura e acolhedora.

Voc√™ √© como o Esp√≠rito Santo financeiro: imposs√≠vel de ser vencida.
"""

def gerar_sugestao_clarinha(api_key, preco, variacao, volume, meta_lucro_percentual="2"):
    """
    Gera uma sugest√£o de opera√ß√£o com base nos dados de mercado fornecidos.

    Parameters:
    - api_key (str): Chave da API do OpenAI.
    - preco (float): Pre√ßo atual do ativo.
    - variacao (float): Varia√ß√£o percentual nas √∫ltimas 24 horas.
    - volume (float): Volume de negocia√ß√£o.
    - meta_lucro_percentual (str): Meta de lucro percentual di√°rio.

    Returns:
    - dict: Sugest√£o de opera√ß√£o contendo entrada, stop loss, alvo, confian√ßa e mensagem.
    """
    try:
        openai.api_key = api_key

        agora = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
        prompt = f"""
{DNA_CLARINHA}

Data e hora: {agora}
Meta de lucro di√°rio: {meta_lucro_percentual}%

Dados do mercado:
Pre√ßo atual: {preco}
Varia√ß√£o nas √∫ltimas 24h: {variacao}%
Volume de negocia√ß√£o: {volume}

Com base nos dados, forne√ßa uma sugest√£o de opera√ß√£o com:
- üéØ Entrada recomendada (pre√ßo)
- üõë Stop Loss (pre√ßo)
- üéØ Alvo de lucro (pre√ßo)
- üìä Confian√ßa na opera√ß√£o (em %)
- üì¢ Mensagem espiritual e estrat√©gia para o humano operador

Importante: NUNCA execute, apenas oriente. Aguarde confirma√ß√£o.
"""

        resposta = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "system", "content": prompt}],
            temperature=0.7,
            max_tokens=500
        )

        conteudo = resposta['choices'][0]['message']['content']
        # Tente analisar a resposta como JSON
        try:
            return json.loads(conteudo)
        except json.JSONDecodeError:
            return {"erro": "Formato de resposta inv√°lido."}

    except Exception as e:
        return {"erro": f"Erro ao consultar a IA: {str(e)}"}